/**
 * AgentAPI Middleware Integration Example
 * 
 * Comprehensive example demonstrating how to use the enhanced middleware client
 * with all agent types and advanced features.
 */

import { EnhancedMiddlewareClient } from './enhanced_middleware_client.js';
import { ClaudeCodeAdapter } from './adapters/claude_code_adapter.js';
import { GooseAdapter } from './adapters/goose_adapter.js';
import { AiderAdapter } from './adapters/aider_adapter.js';
import { CodexAdapter } from './adapters/codex_adapter.js';
import { getEnvironmentConfig } from '../../config/agent_config.js';

/**
 * Example: Basic middleware client usage
 */
async function basicExample() {
  console.log('🚀 Running Basic AgentAPI Middleware Example...');

  const config = getEnvironmentConfig();
  const client = new EnhancedMiddlewareClient({
    baseUrl: config.agentApiUrl,
    enableMetrics: true,
    enableHealthChecks: true
  });

  try {
    // Initialize the client
    await client.initialize();

    // Create a Claude Code session
    const session = await client.createSession('claude', {
      model: 'claude-3-5-sonnet-20241022',
      allowedTools: ['Bash', 'Edit', 'Replace'],
      workingDirectory: process.cwd()
    });

    console.log(`✅ Created session: ${session.id}`);

    // Send a message
    const response = await client.sendMessage(session.id, 
      'Create a simple "Hello, World!" Python script and save it as hello.py'
    );

    console.log('📤 Response:', response.content);

    // Get system metrics
    const metrics = await client.getMetrics();
    console.log('📊 System Metrics:', JSON.stringify(metrics, null, 2));

    // Close the session
    await client.closeSession(session.id);

    // Shutdown the client
    await client.shutdown();

    console.log('✅ Basic example completed successfully');

  } catch (error) {
    console.error('❌ Basic example failed:', error);
  }
}

/**
 * Example: Multi-agent orchestration
 */
async function multiAgentExample() {
  console.log('🚀 Running Multi-Agent Orchestration Example...');

  const config = getEnvironmentConfig();
  const client = new EnhancedMiddlewareClient({
    baseUrl: config.agentApiUrl,
    maxConcurrentSessions: 5
  });

  try {
    await client.initialize();

    // Create sessions for different agents
    const sessions = await Promise.all([
      client.createSession('claude', { 
        systemPrompt: 'You are a senior software architect.' 
      }),
      client.createSession('goose', { 
        profile: 'developer',
        planMode: 'auto' 
      }),
      client.createSession('aider', { 
        autoCommit: false,
        showDiffs: true 
      }),
      client.createSession('codex', { 
        completionMode: 'code',
        language: 'javascript' 
      })
    ]);

    console.log(`✅ Created ${sessions.length} agent sessions`);

    // Orchestrate a complex task across multiple agents
    const task = 'Create a REST API for a todo application with authentication';

    // 1. Claude Code: Architecture planning
    const architectureResponse = await client.sendMessage(sessions[0].id,
      `Plan the architecture for: ${task}. Provide a detailed technical specification.`
    );

    console.log('🏗️ Architecture planned by Claude Code');

    // 2. Goose: Create implementation plan
    const planResponse = await client.sendMessage(sessions[1].id,
      `Based on this architecture: ${architectureResponse.content}\n\nCreate a detailed implementation plan.`
    );

    console.log('📋 Implementation plan created by Goose');

    // 3. Aider: Generate code files
    const codeResponse = await client.sendMessage(sessions[2].id,
      `Implement the following plan:\n${planResponse.content}\n\nCreate the necessary files and code structure.`
    );

    console.log('💻 Code generated by Aider');

    // 4. Codex: Generate additional utilities
    const utilsResponse = await client.sendMessage(sessions[3].id,
      'Generate utility functions for input validation, error handling, and logging for a Node.js REST API'
    );

    console.log('🔧 Utilities generated by Codex');

    // Get comprehensive metrics
    const finalMetrics = await client.getMetrics();
    console.log('📊 Final System Metrics:');
    console.log(`- Active Sessions: ${finalMetrics.sessions.active}`);
    console.log(`- Total Messages: ${finalMetrics.messages.sent}`);
    console.log(`- Average Response Time: ${finalMetrics.performance.averageResponseTime}ms`);

    // Close all sessions
    await Promise.all(sessions.map(session => client.closeSession(session.id)));

    await client.shutdown();

    console.log('✅ Multi-agent example completed successfully');

  } catch (error) {
    console.error('❌ Multi-agent example failed:', error);
  }
}

/**
 * Example: Advanced adapter usage
 */
async function advancedAdapterExample() {
  console.log('🚀 Running Advanced Adapter Example...');

  const config = getEnvironmentConfig();

  // Initialize individual adapters
  const claudeAdapter = new ClaudeCodeAdapter({
    baseUrl: config.agentApiUrl,
    allowedTools: ['Bash', 'Edit', 'Replace', 'Create'],
    temperature: 0.1
  });

  const aiderAdapter = new AiderAdapter({
    baseUrl: config.agentApiUrl,
    autoCommit: true,
    showDiffs: true,
    editFormat: 'diff'
  });

  try {
    // Initialize adapters
    await Promise.all([
      claudeAdapter.initialize(),
      aiderAdapter.initialize()
    ]);

    // Create sessions
    const claudeSession = await claudeAdapter.createSession({
      workingDirectory: './example-project',
      systemPrompt: 'You are an expert JavaScript developer.'
    });

    const aiderSession = await aiderAdapter.createSession({
      workingDirectory: './example-project',
      files: ['package.json', 'src/index.js']
    });

    console.log('✅ Adapter sessions created');

    // Claude Code: Create project structure
    await claudeAdapter.executeTool(claudeSession.id, 'Bash', {
      command: 'mkdir -p example-project/src example-project/tests'
    });

    await claudeAdapter.executeTool(claudeSession.id, 'Create', {
      file: 'example-project/package.json',
      content: JSON.stringify({
        name: 'example-api',
        version: '1.0.0',
        main: 'src/index.js',
        scripts: {
          start: 'node src/index.js',
          test: 'jest'
        },
        dependencies: {
          express: '^4.18.0',
          cors: '^2.8.5'
        }
      }, null, 2)
    });

    console.log('📁 Project structure created by Claude Code');

    // Aider: Add files and implement features
    await aiderAdapter.addFiles(aiderSession.id, [
      'example-project/src/index.js',
      'example-project/src/routes.js'
    ]);

    await aiderAdapter.requestCodeChanges(aiderSession.id,
      'Create a basic Express.js server with CORS middleware and a health check endpoint',
      { type: 'feature', files: ['src/index.js'] }
    );

    await aiderAdapter.requestCodeChanges(aiderSession.id,
      'Add REST API routes for CRUD operations on todos',
      { type: 'feature', files: ['src/routes.js'] }
    );

    console.log('🔧 Features implemented by Aider');

    // Commit changes
    await aiderAdapter.commitChanges(aiderSession.id,
      'feat: Initial API implementation with todo CRUD operations'
    );

    console.log('💾 Changes committed');

    // Get adapter metrics
    const claudeMetrics = await claudeAdapter.getMetrics();
    const aiderMetrics = await aiderAdapter.getMetrics();

    console.log('📊 Adapter Metrics:');
    console.log(`Claude Code - Messages: ${claudeMetrics.totalMessages}, Tools Used: ${Object.keys(claudeMetrics.toolUsage).length}`);
    console.log(`Aider - Files Modified: ${aiderMetrics.totalFilesModified}, Commits: ${aiderMetrics.totalCommits}`);

    // Cleanup
    await Promise.all([
      claudeAdapter.closeSession(claudeSession.id),
      aiderAdapter.closeSession(aiderSession.id)
    ]);

    await Promise.all([
      claudeAdapter.shutdown(),
      aiderAdapter.shutdown()
    ]);

    console.log('✅ Advanced adapter example completed successfully');

  } catch (error) {
    console.error('❌ Advanced adapter example failed:', error);
  }
}

/**
 * Example: Real-time monitoring and health checks
 */
async function monitoringExample() {
  console.log('🚀 Running Monitoring and Health Checks Example...');

  const config = getEnvironmentConfig();
  const client = new EnhancedMiddlewareClient({
    baseUrl: config.agentApiUrl,
    enableMetrics: true,
    enableHealthChecks: true,
    heartbeatInterval: 10000 // 10 seconds
  });

  try {
    await client.initialize();

    // Set up event listeners for monitoring
    client.on('agentHealthy', (data) => {
      console.log(`✅ Agent ${data.agentType} is healthy`);
    });

    client.on('agentUnhealthy', (data) => {
      console.log(`❌ Agent ${data.agentType} is unhealthy: ${data.error?.message}`);
    });

    client.on('sessionCreated', (session) => {
      console.log(`🆕 Session created: ${session.id} (${session.agentType})`);
    });

    client.on('messageProcessed', (data) => {
      console.log(`📤 Message processed in ${data.responseTime}ms`);
    });

    client.on('healthCheck', (status) => {
      console.log(`🔍 Health check completed - Overall status: ${status.overall.status}`);
    });

    // Create some sessions to generate activity
    const sessions = [];
    for (let i = 0; i < 3; i++) {
      const agentTypes = ['claude', 'goose', 'aider', 'codex'];
      const agentType = agentTypes[i % agentTypes.length];
      
      const session = await client.createSession(agentType);
      sessions.push(session);
      
      // Send a test message
      await client.sendMessage(session.id, `Test message ${i + 1}`);
    }

    // Monitor for 30 seconds
    console.log('📊 Monitoring system for 30 seconds...');
    
    const monitoringInterval = setInterval(async () => {
      try {
        const metrics = await client.getMetrics();
        console.log(`📈 Current metrics - Active sessions: ${metrics.sessions.active}, Messages: ${metrics.messages.sent}`);
      } catch (error) {
        console.error('❌ Failed to get metrics:', error);
      }
    }, 5000);

    // Wait for 30 seconds
    await new Promise(resolve => setTimeout(resolve, 30000));

    // Stop monitoring
    clearInterval(monitoringInterval);

    // Get final comprehensive metrics
    const finalMetrics = await client.getMetrics();
    console.log('📊 Final Comprehensive Metrics:');
    console.log(JSON.stringify(finalMetrics, null, 2));

    // Cleanup
    await Promise.all(sessions.map(session => client.closeSession(session.id)));
    await client.shutdown();

    console.log('✅ Monitoring example completed successfully');

  } catch (error) {
    console.error('❌ Monitoring example failed:', error);
  }
}

/**
 * Example: Error handling and recovery
 */
async function errorHandlingExample() {
  console.log('🚀 Running Error Handling and Recovery Example...');

  const config = getEnvironmentConfig();
  const client = new EnhancedMiddlewareClient({
    baseUrl: 'http://localhost:9999', // Intentionally wrong URL
    retryAttempts: 3,
    retryDelay: 1000,
    enableHealthChecks: true
  });

  try {
    // This should fail and demonstrate retry logic
    console.log('🔄 Testing connection failure and retry logic...');
    
    try {
      await client.initialize();
    } catch (error) {
      console.log(`❌ Expected failure: ${error.message}`);
    }

    // Now use correct URL
    client.config.baseUrl = config.agentApiUrl;
    
    console.log('🔄 Retrying with correct configuration...');
    await client.initialize();

    // Test session creation with invalid agent type
    try {
      await client.createSession('invalid-agent');
    } catch (error) {
      console.log(`❌ Expected failure for invalid agent: ${error.message}`);
    }

    // Test message sending to non-existent session
    try {
      await client.sendMessage('non-existent-session', 'test message');
    } catch (error) {
      console.log(`❌ Expected failure for non-existent session: ${error.message}`);
    }

    // Create a valid session and test normal operation
    const session = await client.createSession('claude');
    console.log(`✅ Successfully created session: ${session.id}`);

    const response = await client.sendMessage(session.id, 'Hello, this is a test message');
    console.log(`✅ Successfully sent message, response: ${response.content?.substring(0, 100)}...`);

    // Test graceful shutdown
    await client.closeSession(session.id);
    await client.shutdown();

    console.log('✅ Error handling example completed successfully');

  } catch (error) {
    console.error('❌ Error handling example failed:', error);
  }
}

/**
 * Run all examples
 */
async function runAllExamples() {
  console.log('🌟 Running All AgentAPI Middleware Integration Examples...\n');

  const examples = [
    { name: 'Basic Usage', fn: basicExample },
    { name: 'Multi-Agent Orchestration', fn: multiAgentExample },
    { name: 'Advanced Adapter Usage', fn: advancedAdapterExample },
    { name: 'Monitoring and Health Checks', fn: monitoringExample },
    { name: 'Error Handling and Recovery', fn: errorHandlingExample }
  ];

  for (const example of examples) {
    console.log(`\n${'='.repeat(60)}`);
    console.log(`🎯 ${example.name}`);
    console.log(`${'='.repeat(60)}\n`);

    try {
      await example.fn();
    } catch (error) {
      console.error(`❌ Example "${example.name}" failed:`, error);
    }

    // Wait between examples
    await new Promise(resolve => setTimeout(resolve, 2000));
  }

  console.log('\n🎉 All examples completed!');
}

// Export examples for individual use
export {
  basicExample,
  multiAgentExample,
  advancedAdapterExample,
  monitoringExample,
  errorHandlingExample,
  runAllExamples
};

// Run all examples if this file is executed directly
if (import.meta.url === `file://${process.argv[1]}`) {
  runAllExamples().catch(console.error);
}

