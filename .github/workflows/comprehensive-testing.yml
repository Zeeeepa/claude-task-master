name: Comprehensive Testing Framework

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run comprehensive tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  COVERAGE_THRESHOLD: 95
  PERFORMANCE_THRESHOLD_P95: 2000
  SECURITY_CRITICAL_THRESHOLD: 0

jobs:
  # Quick validation job for fast feedback
  quick-validation:
    name: Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Lint and format check
      run: |
        npm run format-check
        
    - name: Basic unit tests
      run: npm run test -- --testPathPattern=unit --coverage=false --maxWorkers=2
      
  # Unit testing with coverage
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quick-validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run unit tests with coverage
      run: npm run test:unit
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unit-tests
        name: unit-tests-coverage
        
    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results
        path: |
          tests/reports/
          coverage/
          
  # Integration testing
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: quick-validation
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: taskmaster_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup test environment
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/taskmaster_test
        REDIS_URL: redis://localhost:6379
      run: |
        echo "Setting up test environment..."
        # Database migrations would go here
        
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/taskmaster_test
        REDIS_URL: redis://localhost:6379
        SETUP_TEST_DB: true
      run: npm run test:integration
      
    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: tests/reports/
        
  # Security testing
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: quick-validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security tests
      run: npm run test:security
      
    - name: Check security thresholds
      run: |
        if [ -f "tests/reports/security_report.json" ]; then
          CRITICAL=$(jq -r '.summary.critical' tests/reports/security_report.json)
          if [ "$CRITICAL" -gt "$SECURITY_CRITICAL_THRESHOLD" ]; then
            echo "❌ Security test failed: $CRITICAL critical vulnerabilities found (threshold: $SECURITY_CRITICAL_THRESHOLD)"
            exit 1
          else
            echo "✅ Security test passed: $CRITICAL critical vulnerabilities (threshold: $SECURITY_CRITICAL_THRESHOLD)"
          fi
        fi
        
    - name: Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-test-results
        path: tests/reports/security_report.json
        
  # Performance testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [unit-tests, integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run performance tests
      env:
        START_TEST_SERVICES: true
      run: npm run test:performance
      
    - name: Check performance thresholds
      run: |
        if [ -f "tests/reports/performance_report.json" ]; then
          P95_TIME=$(jq -r '.summary.p95_response_time' tests/reports/performance_report.json)
          if [ "$P95_TIME" -gt "$PERFORMANCE_THRESHOLD_P95" ]; then
            echo "❌ Performance test failed: P95 response time ${P95_TIME}ms > ${PERFORMANCE_THRESHOLD_P95}ms"
            exit 1
          else
            echo "✅ Performance test passed: P95 response time ${P95_TIME}ms (threshold: ${PERFORMANCE_THRESHOLD_P95}ms)"
          fi
        fi
        
    - name: Upload performance report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-results
        path: tests/reports/performance_report.json
        
  # End-to-end testing
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 35
    needs: [unit-tests, integration-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: taskmaster_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run E2E tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/taskmaster_test
        SETUP_TEST_DB: true
        START_TEST_SERVICES: true
      run: npm run test:e2e
      
    - name: Upload E2E test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: |
          tests/reports/
          tests/logs/
          
  # Comprehensive workflow testing
  workflow-tests:
    name: Workflow Tests
    runs-on: ubuntu-latest
    timeout-minutes: 40
    needs: [unit-tests, integration-tests, security-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: taskmaster_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run workflow tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/taskmaster_test
        REDIS_URL: redis://localhost:6379
        SETUP_TEST_DB: true
        START_TEST_SERVICES: true
      run: npm run test:workflow
      
    - name: Upload workflow test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: workflow-test-results
        path: tests/reports/
        
  # Comprehensive test suite (only on main branch or scheduled)
  comprehensive-tests:
    name: Comprehensive Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: github.ref == 'refs/heads/main' || github.event_name == 'schedule'
    needs: [unit-tests, integration-tests, security-tests, performance-tests, e2e-tests, workflow-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: taskmaster_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run comprehensive test suite
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/taskmaster_test
        REDIS_URL: redis://localhost:6379
        COVERAGE_THRESHOLD: ${{ env.COVERAGE_THRESHOLD }}
        PERFORMANCE_THRESHOLD_P95: ${{ env.PERFORMANCE_THRESHOLD_P95 }}
        SECURITY_CRITICAL_THRESHOLD: ${{ env.SECURITY_CRITICAL_THRESHOLD }}
      run: npm run test:ci
      
    - name: Generate comprehensive report
      run: npm run test:report
      
    - name: Upload comprehensive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: comprehensive-test-results
        path: |
          tests/reports/
          tests/logs/
          coverage/
          
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Comprehensive Test Results
        path: tests/reports/jest_report.xml
        reporter: jest-junit
        
  # Quality gate check
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security-tests, performance-tests, e2e-tests, workflow-tests]
    if: always()
    
    steps:
    - name: Download all test artifacts
      uses: actions/download-artifact@v3
      
    - name: Quality gate evaluation
      run: |
        echo "🔍 Evaluating quality gates..."
        
        # Check if all required jobs passed
        REQUIRED_JOBS=("unit-tests" "integration-tests" "security-tests" "performance-tests" "e2e-tests" "workflow-tests")
        FAILED_JOBS=()
        
        for job in "${REQUIRED_JOBS[@]}"; do
          if [ "${{ needs[job].result }}" != "success" ]; then
            FAILED_JOBS+=("$job")
          fi
        done
        
        if [ ${#FAILED_JOBS[@]} -eq 0 ]; then
          echo "✅ All quality gates passed!"
          echo "🚀 Ready for deployment"
        else
          echo "❌ Quality gate failed!"
          echo "Failed jobs: ${FAILED_JOBS[*]}"
          exit 1
        fi
        
    - name: Post quality gate results
      if: always()
      run: |
        echo "## Quality Gate Results" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Tests | ${{ needs.security-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Performance Tests | ${{ needs.performance-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Workflow Tests | ${{ needs.workflow-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY

