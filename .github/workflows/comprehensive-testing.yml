name: 🧪 Comprehensive Testing and Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run comprehensive tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  unit-tests:
    name: 🔬 Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🧪 Run unit tests
      run: npm run test:unit
      
    - name: 📊 Upload unit test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results-${{ matrix.node-version }}
        path: coverage/

  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔗 Run integration tests
      run: npm run test:integration
      
    - name: 📊 Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: coverage/

  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: ⚡ Run performance tests
      run: npm run test:performance
      
    - name: 📈 Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: coverage/

  security-tests:
    name: 🔒 Security Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔒 Run security tests
      run: npm run test:security
      
    - name: 🛡️ Run npm audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
      
    - name: 📊 Upload security test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-test-results
        path: coverage/

  chaos-tests:
    name: 🌪️ Chaos Engineering Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🌪️ Run chaos engineering tests
      run: npm run test:chaos
      
    - name: 📊 Upload chaos test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: chaos-test-results
        path: coverage/

  comprehensive-coverage:
    name: 📊 Comprehensive Coverage Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests, security-tests, chaos-tests]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🧪 Run comprehensive test suite with coverage
      run: npm run test:all-coverage
      
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: comprehensive
        name: comprehensive-coverage
        fail_ci_if_error: false
        
    - name: 📈 Upload comprehensive coverage report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: comprehensive-coverage-report
        path: coverage/
        
    - name: 📝 Comment coverage report on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            const coverageSummary = JSON.parse(
              fs.readFileSync('coverage/coverage-summary.json', 'utf8')
            );
            
            const total = coverageSummary.total;
            const coverageComment = `
            ## 📊 Test Coverage Report
            
            | Metric | Coverage | Threshold | Status |
            |--------|----------|-----------|--------|
            | Lines | ${total.lines.pct}% | 90% | ${total.lines.pct >= 90 ? '✅' : '❌'} |
            | Functions | ${total.functions.pct}% | 90% | ${total.functions.pct >= 90 ? '✅' : '❌'} |
            | Branches | ${total.branches.pct}% | 90% | ${total.branches.pct >= 90 ? '✅' : '❌'} |
            | Statements | ${total.statements.pct}% | 90% | ${total.statements.pct >= 90 ? '✅' : '❌'} |
            
            **Overall Coverage**: ${Math.min(total.lines.pct, total.functions.pct, total.branches.pct, total.statements.pct)}%
            
            📄 [View detailed coverage report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: coverageComment
            });
          } catch (error) {
            console.log('Could not read coverage summary:', error.message);
          }

  cross-platform-tests:
    name: 🌐 Cross-Platform Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [20.x]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🧪 Run core tests
      run: npm run test:unit
      
    - name: 📊 Upload cross-platform results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cross-platform-results-${{ matrix.os }}
        path: coverage/

  test-report:
    name: 📋 Generate Test Report
    runs-on: ubuntu-latest
    needs: [comprehensive-coverage, cross-platform-tests]
    if: always()
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📥 Download all test artifacts
      uses: actions/download-artifact@v4
      with:
        path: test-artifacts/
        
    - name: 📊 Generate comprehensive test report
      run: |
        echo "# 🧪 Comprehensive Test Report" > test-report.md
        echo "" >> test-report.md
        echo "**Generated**: $(date)" >> test-report.md
        echo "**Commit**: ${{ github.sha }}" >> test-report.md
        echo "**Branch**: ${{ github.ref_name }}" >> test-report.md
        echo "" >> test-report.md
        
        echo "## 📊 Test Results Summary" >> test-report.md
        echo "" >> test-report.md
        
        # List all test artifacts
        echo "### 📁 Generated Artifacts" >> test-report.md
        find test-artifacts/ -name "*.json" -o -name "*.html" | while read file; do
          echo "- \`$file\`" >> test-report.md
        done
        
        echo "" >> test-report.md
        echo "## 🎯 Test Categories Executed" >> test-report.md
        echo "" >> test-report.md
        echo "- ✅ Unit Tests" >> test-report.md
        echo "- ✅ Integration Tests" >> test-report.md
        echo "- ✅ Performance Tests" >> test-report.md
        echo "- ✅ Security Tests" >> test-report.md
        echo "- ✅ Chaos Engineering Tests" >> test-report.md
        echo "- ✅ Cross-Platform Tests" >> test-report.md
        
    - name: 📤 Upload test report
      uses: actions/upload-artifact@v4
      with:
        name: comprehensive-test-report
        path: |
          test-report.md
          test-artifacts/

  notify-on-failure:
    name: 🚨 Notify on Test Failures
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests, security-tests, chaos-tests]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
    - name: 🚨 Create issue on test failure
      uses: actions/github-script@v7
      with:
        script: |
          const title = `🚨 Comprehensive Test Failure - ${new Date().toISOString().split('T')[0]}`;
          const body = `
          ## Test Failure Alert
          
          **Workflow**: ${{ github.workflow }}
          **Run ID**: ${{ github.run_id }}
          **Commit**: ${{ github.sha }}
          **Branch**: ${{ github.ref_name }}
          **Triggered by**: ${{ github.actor }}
          
          One or more test suites have failed in the main branch. Please investigate and fix the issues.
          
          ### Failed Jobs
          ${{ toJSON(needs) }}
          
          ### Action Required
          - [ ] Review failed test logs
          - [ ] Identify root cause
          - [ ] Fix failing tests
          - [ ] Verify fix with new commit
          
          **View Details**: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          `;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['bug', 'testing', 'urgent']
          });

# Cleanup old workflow runs to save storage
  cleanup:
    name: 🧹 Cleanup Old Artifacts
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 🗑️ Delete old workflow runs
      uses: actions/github-script@v7
      with:
        script: |
          const { data: runs } = await github.rest.actions.listWorkflowRuns({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'comprehensive-testing.yml',
            per_page: 100
          });
          
          // Keep last 10 runs, delete older ones
          const runsToDelete = runs.workflow_runs.slice(10);
          
          for (const run of runsToDelete) {
            if (run.status === 'completed') {
              await github.rest.actions.deleteWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: run.id
              });
            }
          }

